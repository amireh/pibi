$LOAD_PATH << File.join(File.dirname(__FILE__), '..')

ENV['RACK_ENV'] = 'test'

require 'rspec'
require 'rack/test'
require 'capybara/rspec'
require 'capybara/node/matchers'
require 'app'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus => true

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.include Rack::Test::Methods
  Capybara.app = Sinatra::Application
  Capybara.automatic_reload = false

  module Capybara
    module Node
      module Matchers
        def has_keywords?(*keywords)
          if keywords.size == 1
            keywords = keywords.first.split(/\s/)
          end
          return has_text?(Regexp.new(keywords.join('.*')))
          # has_content?()
          # has_xpath?(XPath::HTML.content(Regexp.new(keywords.join('.*'))))
        end
        alias_method :have_keywords, :has_keywords?
      end
    end
  end

  set :courier_service_enabled, false
end

def mockup_user()
  User.destroy

  @some_salt = Pibi.salt
  @user = @u = User.create({
    name: 'Mysterious Mocker',
    email: 'very@mysterious.com',
    provider: 'pibi',
    password: @some_salt,
    password_confirmation: @some_salt
  })
  @account = @a = @user.accounts.first
end